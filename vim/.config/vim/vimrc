" http://vimdoc.sourceforge.net/htmldoc/options.html

" VIM is a naughty boy using ~/.vim/. Teach it to play nice.
let cache_dir=$XDG_CACHE_HOME . '/vim'
let data_dir=$XDG_DATA_HOME . '/vim'
let state_dir=$XDG_STATE_HOME . '/vim'

""""""""
" Plug
""""""""

if empty(glob(data_dir . '/autoload/plug.vim'))
  exe 'silent !curl -fLo ' . data_dir . '/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin($XDG_DATA_HOME . '/vim-plug')

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

Plug 'chrisbra/unicode.vim', { 'do': { -> unicode#Download(1) } }
Plug 'editorconfig/editorconfig-vim'
Plug 'joshdick/onedark.vim'
Plug 'kevinoid/vim-jsonc'
Plug 'LnL7/vim-nix', { 'for': 'nix' }
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-surround'

let g:fzf_command_prefix = 'Fzf'

Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'stsewd/fzf-checkout.vim'

call plug#end()

syntax enable " enable syntax highlighting
let mapleader=" "

"""""""""""""
" Shortcuts
"""""""""""""
" This is commented out because it messes with enter on nvim-compe
" inoremap <CR> <C-G>u<CR>
inoremap , ,<C-g>u
inoremap . .<C-g>u
inoremap ! !<C-g>u
inoremap ? ?<C-g>u
inoremap ; ;<C-g>u
inoremap <bar> <bar><C-g>u
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <leader>gs :Git<CR>
nnoremap <SPACE> <Nop>
nnoremap [t :tabprevious<CR>
nnoremap ]t :tabnext<CR>
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR> " move current tab left
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR> " move current tab right
vnoremap <silent> J :m '>+1<CR>gv=gv " move line up
vnoremap <silent> K :m '<-2<CR>gv=gv " move line down

""""""""""""
" Settings
""""""""""""
set autoindent " new lines inherit the indentation of previous lines
set autoread " reload files changed outside of Vim
set backspace=indent,eol,start " influences the working of <BS>, <Del>, CTRL-W and CTRL-U in insert mode
set cmdheight=2 " give more space for displaying messages
set colorcolumn=80,100,120
set completeopt=menu,noinsert,noselect,preview
set confirm " display confirmation dialog when closing unsaved file
set cursorline " highlight the current line
set encoding=UTF-8
set expandtab
set hidden " TextEdit might fail if hidden is not set
set hlsearch " highlight matches
set incsearch " search as characters are entered
set laststatus=2 " always show the status bar
set lazyredraw " redraw only when we need to
set linebreak " wrap long lines at a character in 'breakat' rather than at the last character that fits on the screen
set list
set listchars=tab:⭢\ ,space:·
set magic
set nobackup " some language servers have issues with backup files, see coc.nvim#649
set nocompatible
set noerrorbells " no sounds please vim
set noshowmode " don't show the mode since we are already using the statusbar
set noswapfile
set nowrap " do not wrap
set nowritebackup " some language servers have issues with backup files, see coc.nvim#649
set nu " show current line number instead of 0
set number " show line numbers
set path+=**
set relativenumber " show relative line numbering
set ruler " show the line and column number of the cursor position, separated by a comma
set scrolloff=5 " start scrolling X lines from bottom or top
set secure " no autocmd, shell, or write commands can be run in .exrc files
set shiftwidth=0
set shortmess+=c " don't pass messages to |ins-completion-menu|
set showbreak=++++  " what to show when line breaks
" set showcmd " show the last run command
set showmatch " highlight matching brackets
set signcolumn=yes " always show the signcolumn
set smarttab " a <Tab> in front of a line inserts blanks according to 'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places
set smartindent " smart autoindenting when starting a new line
set softtabstop=4 " how many spaces a tab is when editing
set tabstop=4 " how many spaces a tab is when viewing
set termguicolors
let &undodir=cache_dir . '/undo'
set undofile
set updatetime=250
let &viminfofile=state_dir . '/info'
set wildmenu " visual autocomplete for command menu

let g:c_syntax_for_h = 1
let g:netrw_banner=0
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

colorscheme onedark
set background=dark

highlight ColorColumn ctermbg=237 guibg=#2E333C

filetype plugin on " allow Vim to recognize the file type

""""""""""""""""
" Auto-behaviors
""""""""""""""""

" Trim whitespace upon writing buffer
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

augroup tristan957
  autocmd!
  autocmd BufWritePre * :call TrimWhitespace()
  autocmd BufEnter,FocusGained,InsertLeave * :set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter * :set norelativenumber
augroup END

"""""""""""""""""""
" Custom Commands
"""""""""""""""""""
